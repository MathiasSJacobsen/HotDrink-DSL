/* 
        
component T {
    var income:number = 500000, percentage:number = 30, time:number = 12, finnmark: boolean = false, deduction:number, tax:number, net_income:number;
    
    constraint noname {
        m21(income, percentage, deduction -> tax, net_income) => [func1(income, percentage, deduction), 4];
        m22(tax, net_income, deduction, percentage -> income) => func2(tax, net_income, deduction, percentage);
        m23(income, percentage, deduction -> tax, net_income) => [tass(income, percentage, deduction), 5];
    }

    constraint m{
        method(finnmark, time -> deduction, percentage) => [ func3(finnmark, time), func2() ]; 
    }
} 
 */
/* component Te {
    //var c = 10.1, f; 
    var f: number = 0;

    var c:number;

    constraint constr_degrees {
        method_from_c_to_f(c -> f) => (c * 9/5 + 32);
        method_from_f_to_c(f -> c) => (f - 32) * 5/9;
    }
} */
component Te {
    var income:number = 500000, percentage:number = 30, time:number = 12, deduction:number, tax:number, net_income:number;

    constraint c1{
            (income, percentage, deduction -> tax, net_income) => [(income * percentage / 100) - deduction, income - (income * percentage / 100) - deduction];
            (tax, net_income, deduction, percentage -> income) => net_income + tax;
            
        }
}
        /* 
        constraint {
            (finnmark, time -> deduction) => 9163 * time + 20000;
            }
} */