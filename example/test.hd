/* 
        
component T {
    var income:number = 500000, percentage:number = 30, time:number = 12, finnmark: boolean = false, deduction:number, tax:number, net_income:number;
    
    constraint noname {
        m21(income, percentage, deduction -> tax, net_income) => [func1(income, percentage, deduction), 4];
        m22(tax, net_income, deduction, percentage -> income) => func2(tax, net_income, deduction, percentage);
        m23(income, percentage, deduction -> tax, net_income) => [tass(income, percentage, deduction), 5];
    }

    constraint m{
        method(finnmark, time -> deduction, percentage) => [ func3(finnmark, time), func2() ]; 
    }
} 
 

component TemperaturConversion {
    
    var celsius:number = 10.1, fahrenheit:number;

    constraint constr_degrees {
        method_from_c_to_f(celsius -> fahrenheit) => (celsius * 9/5 + 32);
        method_from_f_to_c(fahrenheit -> celsius) => (fahrenheit - 32) * 5/9;
    }
}

import { foo } from './temp.js'

component test {
    var a:number, b:number=1;


    constraint te {

        method2(a -> b) => foo(a);
        method3(b -> a) => b*2;

    }
}
*/
import { baseSumFunc, baseSumFunc2, weekendFunc, weekendFunc2, discountFunc2, discountFunc, placeToNorwayPriceFunction, NorwayPriceToPricekWhFunction2} from './temp.js'
component power {


    var mounth: string, place: string="";

    var weekendFeeBool:boolean = false, basePriceBool: boolean = false, discountBool:boolean = false;

    var weekendFee:number, kWh: number = 100, nettleie: number = 1200, basePrice: number, discountPercent: number, totalWithoutDiscount: number, norwayBasePricekHw: number, pricekWh:number, salary: number, prosentSalary:number;

    var discountedPrice: number;

    constraint constr_salary {
        m3(salary, totalWithoutDiscount -> prosentSalary) => totalWithoutDiscount / salary * 100;
    }

    constraint constr_total {
        m4(kWh, norwayBasePricekHw, nettleie, basePrice, weekendFee -> totalWithoutDiscount) => kWh * norwayBasePricekHw + nettleie + basePrice + weekendFee;
        m5(totalWithoutDiscount, norwayBasePricekHw, nettleie, basePrice, weekendFee -> kWh) => (totalWithoutDiscount - nettleie - basePrice - weekendFee) / norwayBasePricekHw;
        m6(totalWithoutDiscount, norwayBasePricekHw, nettleie, kWh, weekendFee -> basePrice) => totalWithoutDiscount - weekendFee - nettleie - kWh * norwayBasePricekHw;
        m7(totalWithoutDiscount, basePrice, nettleie, kWh, weekendFee -> norwayBasePricekHw) => (totalWithoutDiscount - nettleie - basePrice - weekendFee) / kWh;
        m8(totalWithoutDiscount, basePrice, norwayBasePricekHw, kWh, weekendFee -> nettleie) => totalWithoutDiscount - weekendFee - basePrice - kWh * norwayBasePricekHw;
        m13(totalWithoutDiscount, basePrice, norwayBasePricekHw, nettleie, kWh -> weekendFee) => totalWithoutDiscount - basePrice - nettleie - kWh * norwayBasePricekHw;
    }

    constraint constr_basePrice {
        m9(basePriceBool -> basePrice) => baseSumFunc(basePriceBool);
        m10(basePrice -> basePriceBool) => baseSumFunc2(basePrice);
    }

    constraint constr_weekend {
        m11(weekendFeeBool -> weekendFee) => weekendFunc(weekendFeeBool);
        m12(weekendFee -> weekendFeeBool) => weekendFunc2(weekendFee);
    }

    constraint constr_discountedPrice {
        m16(totalWithoutDiscount, discountPercent -> discountedPrice) => totalWithoutDiscount - totalWithoutDiscount * discountPercent / 100;
        m17(discountedPrice, discountPercent -> totalWithoutDiscount) => discountedPrice + discountedPrice * discountPercent / 100;
        m18(discountedPrice, totalWithoutDiscount -> discountPercent) => (totalWithoutDiscount - discountedPrice) / totalWithoutDiscount * 100;
    }
    
    constraint constr_discount {
        m14(discountPercent -> discountBool) => discountFunc2(discountPercent);
        m15(discountBool -> discountPercent) => discountFunc(discountBool);
    }

    constraint constr_place {
        m19(place, pricekWh -> norwayBasePricekHw) => placeToNorwayPriceFunction(place, pricekWh);
        m20(norwayBasePricekHw, place -> pricekWh) => NorwayPriceToPricekWhFunction2(norwayBasePricekHw, place);
    }
}

